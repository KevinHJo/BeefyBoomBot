c
display event.voice.speaking
c
n
c
display event.voice.playing?
c
n
c
display boom_box.queue
c
n
boom_box.queue
n
path
n
boom_box.queue[0]
boom_box.queue
c
path
boom_box.queue
s
n
path
event.voice
c
event.voice.playing?
c
event.voice.playing?
c
n
s
c
display boom_box.queue
cevent
@queue
queue
c
boom_box
idx
c
boom_box
c
boom_box.queue
c
@queue
n
@queue[idx]
idx
s
idx
c
boom_box.queue
c
boom_box.queue
c
boom_box.queue
embed
c
event.channel
channel
event.author
c
idx
i
files
c
event.channel
event.voice
event
c
Dir["lib/songs/**/*"][0]
Dir["lib/songs/**/*"]
c
FileUtils.mv(File.basename(song, File.extname(song)), "./lib/songs/")
FileUtils.mv("File.basename(song, File.extname(song))", "./lib/songs/")
File.basename(song, File.extname(song))
File.extname(song)
File.basename(song)
c
FileUtils.mv("Rick Astley - Never Gonna Give You Up (Official Music Video) [dQw4w9WgXcQ].opus", "./lib/songs/")
FileUtils.mv("Rick Astley - Never Gonna Give You Up (Official Music Video) [dQw4w9WgXcQ].opus", "./songs/")
FileUtil.mv("Rick Astley - Never Gonna Give You Up (Official Music Video) [dQw4w9WgXcQ].opus", "./songs/")
File.exist?("Rick Astley - Never Gonna Give You Up (Official Music Video) [dQw4w9WgXcQ].opus")
File.exists?("Rick Astley - Never Gonna Give You Up (Official Music Video) [dQw4w9WgXcQ].opus")
song
c
FileUBeefyBoomBot/Rick Astley - Never Gonna Give You Up (Official Music Video) [dQw4w9WgXcQ]," ", "~/BeefyBoomBot/lib/songs/#{song}")
FileUtils.mv("BeefyBoomBot/#{song}", "BeefyBoomBot/lib/songs/#{song}")
FileUtil.mv("BeefyBoomBot/#{song}", "BeefyBoomBot/lib/songs/#{song}")
__dir__
Dir.pwd
dirname = File.basename(Dir.getwd)
File.dirname(__FILE__)
File.path
c
File.expand_path("../#{song}")
source_path
c
song
c
YoutubeDL.download(url, extract_audio: true)
YoutubeDL.download(url, extract_audio: true).call
c
YoutubeDL.download(url, extract_audio: true).call
YoutubeDL.download(url, extract_audio: true)
YoutubeDL.download(url, extract_audio: true).call
c
YoutubeDL.download(url, extract_audio: true).call
p YoutubeDL.download(url, extract_audio: true).call
YoutubeDL.download(url, extract_audio: true).call
YoutubeDL.download(url, extract_audio: true)
YoutubeDL.download(url, extract_audio: true).call.error
YoutubeDL.download(url, extract_audio: true).call.state
YoutubeDL.download(url, extract_audio: true).call
c
YoutubeDL.download(url, { "extract-audio": true } )
url
c
bot.voice
bot.attributes
bot
c
event.author.voice_channel
event.author
quit
bot
c
ENV["BOT_TOKEN"]
ENV.keys
quit
ENV["BOT_TOKEN"]
quit
ENV.keys
quit
ENV["BOT_TOKEN"]
ENV
